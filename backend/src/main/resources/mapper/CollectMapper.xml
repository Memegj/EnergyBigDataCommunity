<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="upc.backend.mapper.CollectMapper">
    <resultMap id="BaseResultMap" type="upc.backend.entity.Collect">
        <id column="CollectId" jdbcType="INTEGER" property="CollectId" />
        <result column="CollectType" jdbcType="VARCHAR" property="CollectType" />
        <result column="DataId" jdbcType="INTEGER" property="DataId" />
        <result column="CodeId" jdbcType="INTEGER" property="CodeId" />
        <result column="VideoId" jdbcType="INTEGER" property="VideoId" />
        <result column="LiterId" jdbcType="INTEGER" property="LiterId" />
        <result column="UserId" jdbcType="INTEGER" property="UserId" />
    </resultMap>
    <sql id="Base_Column_List">
        CollectId, CollectType, DataId, CodeId, VideoId, LiterId, UserId
    </sql>

    <select id="selectByDataId" parameterType="Map" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List" />
        from collect
        where DataId = #{dataid,jdbcType=INTEGER}
        and UserId = #{userid,jdbcType=INTEGER}
    </select>

    <select id="selectByCodeId" parameterType="Map" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List" />
        from collect
        where CodeId = #{CodeId,jdbcType=INTEGER}
    </select>

    <select id="selectByVideoId" parameterType="Map" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List" />
        from collect
        where VideoId = #{VideoId,jdbcType=INTEGER}
    </select>

    <select id="selectByLiterId" parameterType="Map" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List" />
        from collect
        where LiterId = #{LiterId,jdbcType=INTEGER}
    </select>

    <select id="selectByCollectType" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List" />
        from collect
        where CollectType = #{CollectType,jdbcType=VARCHAR}
    </select>

    <select id="getNumOfTotalCollect" parameterType="Map" resultType="int">
        select count(*) from collect
    </select>
    <select id="findAllCollectList" parameterType="Map" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from collect
        <if test="start!=null and limit!=null">
            limit #{start},#{limit}
        </if>
    </select>

    <insert id="insert" parameterType="upc.backend.entity.Collect">
        insert into collect (CollectId, CollectType, DataId, CodeId, VideoId, LiterId, UserId)
        values (#{CollectId,jdbcType=INTEGER}, #{CollectType,jdbcType=VARCHAR}, #{DataId,jdbcType=INTEGER}, #{CodeId,jdbcType=INTEGER},
                #{VideoId,jdbcType=INTEGER}, #{LiterId,jdbcType=INTEGER}, #{UserId,jdbcType=INTEGER})
    </insert>
    <insert id="insertSelective" parameterType="upc.backend.entity.Collect">
        insert into collect
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="CollectId != null">
                CollectId,
            </if>
            <if test="CollectType != null">
                CollectType,
            </if>
            <if test="DataId != null">
                DataId,
            </if>
            <if test="CodeId != null">
                CodeId,
            </if>
            <if test="VideoId != null">
                VideoId,
            </if>
            <if test="LiterId != null">
                LiterId,
            </if>
            <if test="UserId != null">
                UserId,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="CollectId != null">
                #{CollectId, jdbcType=INTEGER},
            </if>
            <if test="CollectType != null">
                #{CollectType, jdbcType=VARCHAR},
            </if>
            <if test="DataId != null">
                #{DataId, jdbcType=INTEGER},
            </if>
            <if test="CodeId != null">
                #{CodeId, jdbcType=INTEGER},
            </if>
            <if test="VideoId != null">
                #{VideoId, jdbcType=INTEGER},
            </if>
            <if test="LiterId != null">
                #{LiterId, jdbcType=INTEGER},
            </if>
            <if test="UserId != null">
                #{UserId, jdbcType=INTEGER},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="upc.backend.entity.Collect">
        update collect
        <set>
            <if test="CollectType != null">
                CollectType = #{CollectType,jdbcType=VARCHAR},
            </if>
            <if test="DataId != null">
                DataId = #{DataId,jdbcType=INTEGER},
            </if>
            <if test="CodeId != null">
                CodeId = #{CodeId,jdbcType=INTEGER},
            </if>
            <if test="VideoId != null">
                VideoId = #{VideoId,jdbcType=INTEGER},
            </if>
            <if test="LiterId != null">
                LiterId = #{LiterId,jdbcType=INTEGER},
            </if>
            <if test="UserId != null">
                UserId = #{UserId,jdbcType=INTEGER},
            </if>
        </set>
        where CollectId = #{CollectId,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="upc.backend.entity.Collect">
        update collect
        set CollectType = #{CollectType,jdbcType=VARCHAR},
            DataId = #{DataId,jdbcType=INTEGER},
            CodeId = #{CodeId,jdbcType=INTEGER},
            VideoId = #{VideoId,jdbcType=INTEGER},
            LiterId = #{LiterId,jdbcType=INTEGER},
            UserId = #{UserId,jdbcType=INTEGER}
        where CollectId = #{CollectId,jdbcType=INTEGER}
    </update>
    <delete id="deleteBatchByDataId" parameterType="java.lang.Integer">
        delete from collect
        where DataId in
        <foreach item="id" collection="array" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>

    <delete id="deleteBatchByCodeId" parameterType="java.lang.Integer">
        delete from collect
        where CodeId in
        <foreach item="id" collection="array" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>

    <delete id="deleteBatchByLiterId" parameterType="java.lang.Integer">
        delete from collect
        where LiterId in
        <foreach item="id" collection="array" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>

    <delete id="deleteBatchByVideoId" parameterType="java.lang.Integer">
        delete from collect
        where VideoId in
        <foreach item="id" collection="array" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>
    <delete id="deleteBatch" parameterType="java.lang.Integer">
        delete from collect
        where CollectId in
        <foreach item="id" collection="array" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>
</mapper>